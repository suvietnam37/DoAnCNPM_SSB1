import { useState, useEffect } from 'react';
import axios from 'axios';
import io from 'socket.io-client'; // üÜï Th√™m socket.io-client
import NavMenu from '../NavMenu/NavMenu';
import classNames from 'classnames/bind';
import styles from './ParentContent.module.scss';
import RouteStatus from './RouteStatus/RouteStatus';
import StudentManage from './StudentManage/StudentManage';
import Notification from './Notification/Notification';
import MapRoute from './MapRoute/MapRoute';

const cx = classNames.bind(styles);

const token = localStorage.getItem('access_token');

// Gi·∫£ ƒë·ªãnh ID c·ªßa ph·ª• huynh v√† t√†i kho·∫£n
const LOGGED_IN_PARENT_ID = 1;
const LOGGED_IN_PARENT_ACCOUNT_ID = 3;

// üÜï T·∫°o k·∫øt n·ªëi socket (ch·ªâ c·∫ßn t·∫°o 1 l·∫ßn)
const socket = io('http://localhost:5000'); // ƒê·ªïi URL theo backend c·ªßa b·∫°n n·∫øu kh√°c

function ParentContent() {
    // State qu·∫£n l√Ω d·ªØ li·ªáu
    const [students, setStudents] = useState([]);
    const [notifications, setNotifications] = useState([]);
    const [routeStatus, setRouteStatus] = useState(null); // L∆∞u th√¥ng tin tuy·∫øn xe ƒëang ch·∫°y
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const fetchParentData = async () => {
            setLoading(true);
            try {
                // B∆∞·ªõc 1: L·∫•y danh s√°ch con v√† th√¥ng b√°o c√πng l√∫c
                const [studentsRes, notificationsRes] = await Promise.all([
                    axios.get(`http://localhost:5000/api/students?parent_id=${LOGGED_IN_PARENT_ID}`),
                    axios.get(`http://localhost:5000/api/notifications?account_id=${LOGGED_IN_PARENT_ACCOUNT_ID}`),
                ]);

                const studentList = studentsRes.data;
                setStudents(studentList);
                setNotifications(notificationsRes.data);

                // B∆∞·ªõc 2: D·ª±a v√†o th√¥ng tin con, t√¨m tuy·∫øn xe ƒëang ch·∫°y
                if (studentList.length > 0) {
                    const routeId = studentList[0].route_id;

                    try {
                        const routeStatusRes = await axios.get(
                            `http://localhost:5000/api/route_assignments/current?route_id=${routeId}`,
                        );
                        setRouteStatus(routeStatusRes.data);
                    } catch (routeError) {
                        console.log('Tuy·∫øn xe c·ªßa con hi·ªán kh√¥ng ho·∫°t ƒë·ªông.');
                        setRouteStatus(null);
                    }
                }
            } catch (error) {
                console.error('L·ªói khi t·∫£i d·ªØ li·ªáu cho ph·ª• huynh:', error);
            } finally {
                setLoading(false);
            }
        };

        fetchParentData();
    }, []);

    // üÜï useEffect cho socket.io: nh·∫≠n d·ªØ li·ªáu th·ªùi gian th·ª±c
    useEffect(() => {
        socket.on('busLocationUpdate', (data) => {
            console.log('Nh·∫≠n v·ªã tr√≠ xe bu√Ωt m·ªõi:', data);
            // N·∫øu tuy·∫øn hi·ªán t·∫°i tr√πng v·ªõi route_id c·ªßa d·ªØ li·ªáu g·ª≠i ƒë·∫øn ‚Üí c·∫≠p nh·∫≠t giao di·ªán
            if (routeStatus && data.route_id === routeStatus.route_id) {
                setRouteStatus((prev) => ({
                    ...prev,
                    current_location: data.location,
                }));
            }
        });

        // Cleanup khi component unmount
        return () => {
            socket.off('busLocationUpdate');
        };
    }, [routeStatus]);

    const menus = [
        { name: 'Tr·∫°ng Th√°i Tuy·∫øn Xe', id: 'route-status', offset: -300 },
        { name: 'Qu·∫£n L√Ω Con Em', id: 'student-manage', offset: -280 },
        { name: 'Th√¥ng B√°o H·ªá Th·ªëng', id: 'notification', offset: -250 },
        { name: 'Theo D√µi Tuy·∫øn ƒê∆∞·ªùng', id: 'map-route', offset: -200 },
    ];

    if (loading) {
        return <div>ƒêang t·∫£i th√¥ng tin...</div>;
    }

    return (
        <div className={cx('header-position')}>
            <NavMenu menus={menus} role={'Parent'} />
            <div className={cx('content-position')}>
                <RouteStatus routeStatus={routeStatus} />
                <StudentManage students={students} />
                <Notification notifications={notifications} />
                <MapRoute routeStatus={routeStatus} />
            </div>
        </div>
    );
}

export default ParentContent;
